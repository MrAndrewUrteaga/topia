{"ast":null,"code":"export default function listUsersInView(users, positionX, positionY, screenWidth, screenHeight) {\n  const usersInView = [];\n  const avatarHeight = 125;\n  const avatarWidth = 50;\n\n  // WRITE SOLUTION BELOW. ADD USERNAME AND IS_BROADCASTER TO 'usersInView' IF USER FALLS INTO VISIBLE RANGE\n  for (const userId in users) {\n    if (users.hasOwnProperty(userId)) {\n      const user = users[userId];\n      const {\n        x,\n        y\n      } = user;\n\n      // Calculate the bounds of the user's avatar\n      const minX = x - avatarWidth / 2;\n      const maxX = x + avatarWidth / 2;\n      const minY = y - avatarHeight / 2;\n      const maxY = y + avatarHeight / 2;\n\n      // Check if the user's avatar is within the viewport\n      const isInView = minX <= positionX + screenWidth / 2 && maxX >= positionX - screenWidth / 2 && minY <= positionY + screenHeight / 2 && maxY >= positionY - screenHeight / 2;\n      if (isInView) {\n        usersInView.push(userId);\n      }\n    }\n  }\n  // END SOLUTION SECTION\n\n  return usersInView;\n}","map":{"version":3,"names":["listUsersInView","users","positionX","positionY","screenWidth","screenHeight","usersInView","avatarHeight","avatarWidth","userId","hasOwnProperty","user","x","y","minX","maxX","minY","maxY","isInView","push"],"sources":["/Users/drew/topia/src/utils/listUsersInView.js"],"sourcesContent":["export default function listUsersInView(users, positionX, positionY, screenWidth, screenHeight) {\n  const usersInView = [];\n  const avatarHeight = 125;\n  const avatarWidth = 50;\n\n  // WRITE SOLUTION BELOW. ADD USERNAME AND IS_BROADCASTER TO 'usersInView' IF USER FALLS INTO VISIBLE RANGE\n  for (const userId in users) {\n    if (users.hasOwnProperty(userId)) {\n      const user = users[userId];\n      const { x, y } = user;\n\n      // Calculate the bounds of the user's avatar\n      const minX = x - avatarWidth / 2;\n      const maxX = x + avatarWidth / 2;\n      const minY = y - avatarHeight / 2;\n      const maxY = y + avatarHeight / 2;\n\n      // Check if the user's avatar is within the viewport\n      const isInView =\n        minX <= positionX + screenWidth / 2 &&\n        maxX >= positionX - screenWidth / 2 &&\n        minY <= positionY + screenHeight / 2 &&\n        maxY >= positionY - screenHeight / 2;\n\n      if (isInView) {\n        usersInView.push(userId);\n      }\n    }\n  }\n  // END SOLUTION SECTION\n\n  return usersInView;\n}"],"mappings":"AAAA,eAAe,SAASA,eAAeA,CAACC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,WAAW,EAAEC,YAAY,EAAE;EAC9F,MAAMC,WAAW,GAAG,EAAE;EACtB,MAAMC,YAAY,GAAG,GAAG;EACxB,MAAMC,WAAW,GAAG,EAAE;;EAEtB;EACA,KAAK,MAAMC,MAAM,IAAIR,KAAK,EAAE;IAC1B,IAAIA,KAAK,CAACS,cAAc,CAACD,MAAM,CAAC,EAAE;MAChC,MAAME,IAAI,GAAGV,KAAK,CAACQ,MAAM,CAAC;MAC1B,MAAM;QAAEG,CAAC;QAAEC;MAAE,CAAC,GAAGF,IAAI;;MAErB;MACA,MAAMG,IAAI,GAAGF,CAAC,GAAGJ,WAAW,GAAG,CAAC;MAChC,MAAMO,IAAI,GAAGH,CAAC,GAAGJ,WAAW,GAAG,CAAC;MAChC,MAAMQ,IAAI,GAAGH,CAAC,GAAGN,YAAY,GAAG,CAAC;MACjC,MAAMU,IAAI,GAAGJ,CAAC,GAAGN,YAAY,GAAG,CAAC;;MAEjC;MACA,MAAMW,QAAQ,GACZJ,IAAI,IAAIZ,SAAS,GAAGE,WAAW,GAAG,CAAC,IACnCW,IAAI,IAAIb,SAAS,GAAGE,WAAW,GAAG,CAAC,IACnCY,IAAI,IAAIb,SAAS,GAAGE,YAAY,GAAG,CAAC,IACpCY,IAAI,IAAId,SAAS,GAAGE,YAAY,GAAG,CAAC;MAEtC,IAAIa,QAAQ,EAAE;QACZZ,WAAW,CAACa,IAAI,CAACV,MAAM,CAAC;MAC1B;IACF;EACF;EACA;;EAEA,OAAOH,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}